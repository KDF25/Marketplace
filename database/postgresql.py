import asyncio

import asyncpg

import config
from datetime_now import dt_now


class Database:
    def __init__(self, loop: asyncio.AbstractEventLoop):
        self.pool: asyncio.pool.Pool = loop.run_until_complete(
            asyncpg.create_pool(
                database="Marketplace",
                user=config.PGUSER,
                password=config.PASSWORD,
                host=config.ip,
            )
        )

    async def sql_start(self):
        if self.pool:
            print('Data base connected ok!')
            await self._create_table_telegram_users()

    async def _create_table_telegram_users(self):
        sql = """CREATE TABLE IF NOT EXISTS telegram_users(
                id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id BIGINT NOT NULL, 
                username VARCHAR(255),
                language VARCHAR(255),
                role VARCHAR(255),
                status BOOL,
                deeplink VARCHAR(255),
                datetime_registration timestamp NOT NULL,
                client_id BIGINT,           
                email VARCHAR(255)
                )"""
        await self.pool.execute(sql)

    # exist
    async def exist_telegram_user(self, user_id: int):
        sql = """SELECT CASE WHEN EXISTS (SELECT * FROM public.telegram_users WHERE user_id = $1)
                THEN TRUE ELSE FALSE END"""
        return (await self.pool.fetchrow(sql, user_id))[0]

    async def exist_lang(self, user_id: int):
        sql = """SELECT CASE WHEN EXISTS (SELECT * FROM public.telegram_users 
                WHERE user_id = $1 and language is not NULL)
                THEN TRUE ELSE FALSE END"""
        return (await self.pool.fetchrow(sql, user_id))[0]

    # block_status
    async def block_status(self, user_id: int, status: bool):
        sql = """UPDATE public.telegram_users SET status = $2 WHERE user_id = $1"""
        await self.pool.execute(sql, user_id, status)

    # language
    async def select_language(self, user_id: int):
        sql = """ SELECT language FROM public.telegram_users 
                  WHERE user_id = $1 """
        lang = await self.pool.fetchrow(sql, user_id)
        return lang if lang is None else lang[0]

    async def update_language(self, language: str, user_id: int):
        sql = """UPDATE public.telegram_users SET language = $1 WHERE user_id = $2"""
        await self.pool.execute(sql, language, user_id)

    # email
    async def select_email(self, user_id: int):
        sql = """SELECT email FROM public.telegram_users   WHERE user_id = $1  """
        return (await self.pool.fetchrow(sql, user_id))[0]

    # first rec
    async def first_rec_telegram_user(self, user_id: int, username: str):
        date = dt_now.now()
        sql = """INSERT INTO telegram_users (user_id, username, status, datetime_registration)
                 VALUES ($1, $2, TRUE, $3)"""
        await self.pool.execute(sql, user_id, username, date)

    async def update_telegram_user(self, user_id: int, email: str, client_id: int):
        sql = """UPDATE public.telegram_users
                    SET client_id=$3, email=$2
                    WHERE user_id = $1"""
        await self.pool.execute(sql, user_id, email, client_id)

    # get user id form client id
    async def select_users(self, client_id: int):
        sql = """SELECT user_id FROM public.telegram_users WHERE client_id = $1"""
        return await self.pool.fetch(sql, client_id)

    async def select_client_id(self, user_id: int):
        sql = """SELECT client_id  FROM public.telegram_users WHERE user_id = $1"""
        return (await self.pool.fetchrow(sql, user_id))[0]

    async def get_all_users(self):
        sql = """SELECT user_id FROM public.telegram_users"""
        return await self.pool.fetch(sql)

    async def get_all_unblock(self):
        sql = """   SELECT COUNT(*) FROM public.telegram_users WHERE status = TRUE
                UNION ALL
                    (SELECT COUNT(*) FROM public.telegram_users WHERE status = FALSE)"""
        return await self.pool.fetch(sql)

